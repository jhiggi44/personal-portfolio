{"ast":null,"code":"import _slicedToArray from \"/Users/jordanhiggins/Desktop/personal_projects/personal-portfolio/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/jordanhiggins/Desktop/personal_projects/personal-portfolio/portfolio/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jordanhiggins/Desktop/personal_projects/personal-portfolio/portfolio/src/components/Header.js\";\n\nfunction _templateObject6() {\n  const data = _taggedTemplateLiteral([\"\\n    display: \", \";\\n    -moz-transform: scale(-1, 1);\\n    -webkit-transform: scale(-1, 1);\\n    -o-transform: scale(-1, 1);\\n    -ms-transform: scale(-1, 1);\\n    transform: scale(-1, 1);\\n    position: absolute;\\n    bottom: 0;\\n    left: 50%;\\n    width: 50%;\\n    z-index: 4;\\n\"]);\n\n  _templateObject6 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  const data = _taggedTemplateLiteral([\"\\n    display: inline-block;\\n    position: absolute;\\n    bottom: 0;\\n    left: 0;\\n    width: \", \";\\n    z-index: 4;\\n\"]);\n\n  _templateObject5 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n    position: absolute;\\n    \", \";\\n    background-color: \", \";\\n    padding: 25px;\\n    display: inline-block;\\n    color: black;\\n    //calc([minimum size] + ([maximum size] - [minimum size]) * ((100vw - [minimum viewport width]) / ([maximum viewport width] - [minimum viewport width])));\\n    font-size: calc(22px + (38 - 22) * ((100vw - 600px) / (1600 - 600)));\\n    font-family: 'Roboto Mono', monospace;\\n    z-index: 3;\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n    padding-top: 80px;\\n    height: 40vh;\\n    position: relative;\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n    position: absolute;\\n    bottom: 0;\\n    left: \", \";\\n    z-index: \", \";\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    width: 100vw;\\n    background-color: #020343;\\n    // background-image: linear-gradient(black 1%, #020343 99%);\\n    position: relative;\\n    overflow: hidden;\\n    z-index: 0;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport IntroImg from './IntroImg';\nimport transit from \"../images/transit-1.svg\"; //helper methods\n\nfunction getNumBtwn(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction getMargin() {\n  let rand = getNumBtwn(0, 105);\n  if (rand < 40) return getNumBtwn(0, 30) - 5;\n  if (rand < 80) return getNumBtwn(70, 105) - 5;\n  return getNumBtwn(30, 70) - 5;\n}\n\nconst numOfBlocks = 20;\nconst colors = [\"#f3db95\", \"#ebebeb\", \"#88918e\", \"#a1a1ff\", \"#7a7ae6\"];\nconst Container = styled.div(_templateObject());\nconst BitBlock = styled.svg(_templateObject2(), props => props.margin, props => props.zIndex);\nconst TxtContainer = styled.div(_templateObject3());\nconst TxtBlock = styled.div(_templateObject4(), props => props.pos, props => props.color);\nconst Transit1 = styled.img(_templateObject5(), props => props.size);\nconst Transit2 = styled.img(_templateObject6(), props => props.display);\n\nfunction Header() {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        pos = _useState2[0],\n        setPos = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        blockInfo = _useState4[0],\n        setInfo = _useState4[1];\n\n  const _useState5 = useState(1),\n        _useState6 = _slicedToArray(_useState5, 2),\n        sizingOffset = _useState6[0],\n        setOffset = _useState6[1];\n\n  useEffect(() => {\n    if (blockInfo.length === 0) {\n      window.addEventListener('scroll', () => {\n        setPos(window.pageYOffset);\n      });\n\n      if (window.innerWidth < 600) {\n        setOffset(2);\n      } else if (window.innerWidth < 900) {\n        setOffset(1.5);\n      } // creates a random speedmap to generate blocks that rise with different speeds. \n\n\n      (function (total) {\n        let infoList = [];\n\n        for (let i = 0; i < total; i++) {\n          infoList.push({\n            speed: getNumBtwn(5, 35),\n            size: getNumBtwn(20, 45),\n            margin: \"\".concat(getMargin(), \"%\"),\n            offset: getNumBtwn(0, 100),\n            color: colors[getNumBtwn(0, colors.length - 1)],\n            zIndex: getNumBtwn(0, 4)\n          });\n        } // console.log(infoList);\n\n\n        setInfo(infoList);\n      })(numOfBlocks);\n    }\n  });\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(IntroImg, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), React.createElement(TxtContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(TxtBlock, {\n    pos: \"top: 5vh; left: calc(20% + \".concat(pos / (10 * sizingOffset), \"px);\"),\n    color: \"#f3db95\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Jordan Higgins\"), React.createElement(TxtBlock, {\n    pos: \"top: 20vh; right: calc(\".concat(20 / sizingOffset, \"% + \").concat(pos / (10 * sizingOffset), \"px);\"),\n    color: \"#a1a1ff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"A Software Developer\")), blockInfo.map((block, i) => React.createElement(BitBlock, {\n    key: i,\n    margin: block.margin,\n    zIndex: block.zIndex,\n    style: {\n      bottom: \"\".concat(pos / block.speed - block.offset, \"vh\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"rect\", {\n    fill: block.color,\n    width: \"\".concat(block.size / sizingOffset, \"px\"),\n    height: \"\".concat(block.size / sizingOffset, \"px\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }))));\n}\n\nexport default Header;","map":{"version":3,"sources":["/Users/jordanhiggins/Desktop/personal_projects/personal-portfolio/portfolio/src/components/Header.js"],"names":["React","useEffect","useState","styled","IntroImg","getNumBtwn","min","max","Math","floor","random","getMargin","rand","numOfBlocks","colors","Container","div","BitBlock","svg","props","margin","zIndex","TxtContainer","TxtBlock","pos","color","Transit1","img","size","Transit2","display","Header","setPos","blockInfo","setInfo","sizingOffset","setOffset","length","window","addEventListener","pageYOffset","innerWidth","total","infoList","i","push","speed","offset","map","block","bottom"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport IntroImg from './IntroImg';\nimport transit from '../images/transit-1.svg';\n\n//helper methods\nfunction getNumBtwn(min, max) {\n    return Math.floor(Math.random() * (max - min) + min)\n}\n\nfunction getMargin() {\n    let rand = getNumBtwn(0, 105);\n    if(rand < 40)\n        return getNumBtwn(0, 30) - 5;\n    if(rand < 80)\n        return getNumBtwn(70, 105) - 5;\n    return getNumBtwn(30, 70) - 5;\n}\n\nconst numOfBlocks = 20;\nconst colors = [\"#f3db95\", \"#ebebeb\", \"#88918e\", \"#a1a1ff\", \"#7a7ae6\"];\n\nconst Container = styled.div`\n    width: 100vw;\n    background-color: #020343;\n    // background-image: linear-gradient(black 1%, #020343 99%);\n    position: relative;\n    overflow: hidden;\n    z-index: 0;\n`;\n\nconst BitBlock = styled.svg`\n    position: absolute;\n    bottom: 0;\n    left: ${props => props.margin};\n    z-index: ${props => props.zIndex};\n`;\n\nconst TxtContainer = styled.div`\n    padding-top: 80px;\n    height: 40vh;\n    position: relative;\n`;\n\nconst TxtBlock = styled.div`\n    position: absolute;\n    ${props => props.pos};\n    background-color: ${props => props.color};\n    padding: 25px;\n    display: inline-block;\n    color: black;\n    //calc([minimum size] + ([maximum size] - [minimum size]) * ((100vw - [minimum viewport width]) / ([maximum viewport width] - [minimum viewport width])));\n    font-size: calc(22px + (38 - 22) * ((100vw - 600px) / (1600 - 600)));\n    font-family: 'Roboto Mono', monospace;\n    z-index: 3;\n`;\n\nconst Transit1 = styled.img`\n    display: inline-block;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: ${props => props.size};\n    z-index: 4;\n`;\n\nconst Transit2 = styled.img`\n    display: ${props => props.display};\n    -moz-transform: scale(-1, 1);\n    -webkit-transform: scale(-1, 1);\n    -o-transform: scale(-1, 1);\n    -ms-transform: scale(-1, 1);\n    transform: scale(-1, 1);\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    width: 50%;\n    z-index: 4;\n`;\n\nfunction Header() {\n    const [pos, setPos] = useState(0);\n    const [blockInfo, setInfo] = useState([]);\n    const [sizingOffset, setOffset] = useState(1);\n    useEffect(()=> {\n        if (blockInfo.length === 0) {\n            window.addEventListener('scroll', () => {\n                setPos(window.pageYOffset);\n            });\n\n            if(window.innerWidth < 600) {\n                setOffset(2);\n            } else if (window.innerWidth < 900) {\n                setOffset(1.5);\n            }\n\n\n            // creates a random speedmap to generate blocks that rise with different speeds. \n            (function (total) {\n                let infoList = [];\n                for (let i = 0; i < total; i++) {\n                    infoList.push({\n                        speed: getNumBtwn(5, 35),\n                        size: getNumBtwn(20,45),\n                        margin: `${getMargin()}%`,\n                        offset: getNumBtwn(0, 100),\n                        color: colors[getNumBtwn(0, colors.length - 1)],\n                        zIndex: getNumBtwn(0, 4)\n                    });\n                }\n                // console.log(infoList);\n                setInfo(infoList);\n            }(numOfBlocks));\n        }\n    });\n\n    return (\n        <Container>\n            <IntroImg />\n            <TxtContainer>\n                <TxtBlock pos={`top: 5vh; left: calc(20% + ${pos/(10 * sizingOffset)}px);`} color=\"#f3db95\">Jordan Higgins</TxtBlock>\n                <TxtBlock pos={`top: 20vh; right: calc(${20/sizingOffset}% + ${pos/(10 * sizingOffset)}px);`} color=\"#a1a1ff\">A Software Developer</TxtBlock>\n            </TxtContainer>\n            {blockInfo.map((block, i) => \n                <BitBlock key={i} margin={block.margin} zIndex={block.zIndex} style={{bottom: `${((pos) / block.speed) - block.offset}vh`}}>\n                    <rect fill={block.color} width={`${block.size/sizingOffset}px`} height={`${block.size/sizingOffset}px`} />\n                </BitBlock>\n            )}\n            {/* <Transit1 size={(sizingOffset === 2) ? \"100%\" : \"50%\"} src={transit} />\n            <Transit2 display={(sizingOffset === 2) ? \"none\" : \"inline-block\"} src={transit} /> */}\n        </Container>\n    )\n}\n\nexport default Header;"]},"metadata":{},"sourceType":"module"}